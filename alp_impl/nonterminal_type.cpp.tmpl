#include <<%= @pkg %>_nonterminal_type.h>
#include <<%= @pkg %>_error.h>
#include <cassert>

namespace <%= @pkg %> {

// CLASS METHODS
bool NonterminalType::fromInt(Value* v, int i)
{
    assert(v);    
    switch(i) {
<% @nonterminal_types.each do |nonterminal_type| %>
        case <%= nonterminal_type.upcase %>: {
            *v = <%= nonterminal_type.upcase %>;
            return true;
        } break;
<% end %>
    }
    return false;
}

bool NonterminalType::fromString(Value* v, const std::string& s)
{
    assert(v);
<% @nonterminal_types.each do |nonterminal_type| %>
    if(s == "<%= nonterminal_type.upcase %>")
    {
        *v = <%= nonterminal_type.upcase %>;
        return true;
    }
<% end %>
    return false;
}

int NonterminalType::toInt(Value v)
{
    return v;
}

std::string NonterminalType::toString(Value v)
{
    switch(v) {
<% @nonterminal_types.each do |nonterminal_type| %>
        case <%= nonterminal_type.upcase %>: return "<%= nonterminal_type.upcase %>";
<% end %>
    }
    assert(0);
    return "";
}
    
} // close namespace <%= @pkg %>

